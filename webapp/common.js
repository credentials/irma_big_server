'use strict';

var credentialsJWT;

function init() {
    $('#request-attributes')
        .on('click', requestAttributes)
        .prop('disabled', false);
    $('#issue-attributes')
        .on('click', issueAttributes);
    $('#back-from-attributes')
        .on('click', cancelAttributes);
}

function requestAttributes() {
    // Indicate progress
    $('#result-alert').addClass('hidden');
    $('#btn-request').prop('disabled', true);
    showProgress(MESSAGES['request-disclosure-request']);

    $.ajax({
        url: CONF.BIGSERVER + 'request-search-attrs',
    }).done(function(jwt) {
        showProgress(MESSAGES['request-idin-attributes']);
        irma.startSession(CONF.IRMASERVER,jwt,"publickey")
            .then(({ sessionPtr, token }) => irma.handleSession(sessionPtr, {server: CONF.IRMASERVER, token, legacyResultJwt: true}))
            .then(requestAttributesFromBackend)
            .catch((err) => {
                if (err === irma.SessionStatus.Cancelled) {
                    requestEnd('cancel');
                    // The user explicitly cancelled the request, so do nothing.
                    console.warn('user cancelled disclosure');
                } else {
                    console.error('could not request iDIN attributes:', err);
                    requestEnd('danger', MESSAGES['error-cannot-request-idin'], err);
                }
            });
    }).fail(function(data) {
        requestEnd('danger', MESSAGES['error-cannot-connect-backend']);
    });
}

function requestAttributesFromBackend(disclosureJWT) {
    console.log('got disclosure result JWT:', disclosureJWT);
    showProgress(MESSAGES['request-big-credentials']);
    $.ajax(CONF.BIGSERVER + 'request-attrs', {
        type: 'POST',
        data: disclosureJWT,
        processData: false, // unnecessary as we're sending a string
        contentType: 'text/plain',
    })
        .done(function(jwt) {
            credentialsJWT = jwt;
            console.log('issuing JWT', jwt);

            // Very crude JWT parser
            var credentials = JSON.parse(atob(jwt.split('.')[1]));

            // Show the new screen with the list of attributes and a button
            // to issue them.
            $('#window-before-request').hide();
            $('#window-after-request').show();
            $('#attributes .number').text(credentials.iprequest.request.credentials[0].attributes.bignumber);
            $('#attributes .startdate').text(credentials.iprequest.request.credentials[0].attributes.startdate);
            $('#attributes .profession').text(credentials.iprequest.request.credentials[0].attributes.profession);
            $('#attributes .specialism').text(credentials.iprequest.request.credentials[0].attributes.specialism);
            showProgress('Waiting for load button...'); // invisible to user
        })
        .fail(function(jqXhr, textStatus) {
            var errormsg = jqXhr.responseText;
            if (errormsg === undefined) {
                errormsg = 'error:connection';
            }
            console.error('failed to request credentials:', textStatus, errormsg);

            var message;
            if (errormsg.substr(0, 6) === 'error:') {
                if (errormsg in MESSAGES) {
                    message = MESSAGES[errormsg];
                } else {
                    // Fallback - message needs to be added to MESSAGES.
                    message = errormsg;
                }
            } else {
                // Most messages are prefixed with 'error:'. But some may not
                // be, for example, when there's a more severe configuration
                // problem in the server and the error is not generated by
                // the REST API. These are no 'user errors' or errors that occur
                // due to some issue on the client side - these are really our
                // fault.
                // The actual error can be seen in the developer console.
                message = MESSAGES['error-unknown'];
            }

            if (errormsg === 'error:no-results') {
                requestEnd('danger', MESSAGES['error-no-results-header'], message);
            } else {
                requestEnd('danger', MESSAGES['error-backend-fail'], message);
            }
        });
}

function showProgress(message) {
    console.log('progress:', message);
    $('#progress').text(message);
}


function requestEnd(result, message, errormsg) {
    console.log('user message: ' + result + ': ' + message);
    $('#btn-request').prop('disabled', false);
    $('#progress').text('');

    if (result !== 'cancel') {
        $('#result-alert')
            .removeClass('alert-success') // remove all 4 alert types
            .removeClass('alert-info')
            .removeClass('alert-warning')
            .removeClass('alert-danger')
            .addClass('alert-' + result)
            .text(message)
            .removeClass('hidden')
            .append('<br>')
            .append($('<small></small>').text(errormsg))
    }
}

function issueAttributes() {
    showProgress(MESSAGES['issue-start']);
    irma.startSession(CONF.IRMASERVER, credentialsJWT, "publickey")
        .then(({ sessionPtr, token }) => irma.handleSession(sessionPtr, {server: CONF.IRMASERVER, token}))
        .then(()=>{
            console.log('issue success!');
            requestEnd('success', MESSAGES['issue-success'])

            // Go back to the start screen - we're done.
            $('#window-before-request').show();
            $('#window-after-request').hide();
        })
        .catch((err) => {
            if (err === irma.SessionStatus.Cancelled) {
                console.warn('cancelled while issuing:', msg);
                requestEnd('cancel');
                // The user can try again now, or press 'cancel' on the issue screen.
            } else {
                console.error('error while issuing:', err)
                requestEnd('danger', MESSAGES['issue-error'], err);

                // Go back to the start screen to show the error.
                $('#window-before-request').show();
                $('#window-after-request').hide();
            }
        });
}

function cancelAttributes() {
    requestEnd('cancel');
    $('#window-before-request').show();
    $('#window-after-request').hide();
}

init();
