'use strict';

var BIGSERVER = '/tomcat/irma_big_server/api/';

var MESSAGES = {
    'error:no-results':         'Searching the BIG-register with your data was unsuccesful. Please contact irma \'at\' privacybydesign.foundation if you do have a BIG-registration.',
    'error:multiple-results':   'With your data multiple results have been found in the BIG-register; therefore, no unambiguous attributes can be issued.',
    'error:invalid-jwt':        'JWT cannot be verified - is there an asynchrony of clocks?',
    'error:big-request-failed': 'Communication with the BIG-register failed.',
};

var credentialsJWT;

function init() {
    $('#request-attributes')
        .on('click', requestAttributes)
        .prop('disabled', false);
    $('#issue-attributes')
        .on('click', issueAttributes);
    $('#back-from-attributes')
        .on('click', cancelAttributes);
}

function requestAttributes() {
    // Indicate progress
    $('#result-alert').addClass('hidden');
    $('#btn-request').prop('disabled', true);
    showProgress('Requesting disclosure request...');

    $.ajax({
        url: BIGSERVER + 'request-search-attrs',
    }).done(function(jwt) {
        showProgress('Requesting iDIN attributes...');
        IRMA.verify(jwt,
        requestAttributesFromBackend, // success
        function(message) { // cancel
            requestEnd('cancel');
            // The user explicitly cancelled the request, so do nothing.
            console.warn('user cancelled disclosure');
        }, function(errormsg) { // error
            console.error('could not request iDIN attributes:', errormsg);
            requestEnd('danger', 'iDIN data cannot be collected', errormsg);
        });
    }).fail(function(data) {
        requestEnd('danger', 'Connection with the backend server failed');
    });
}

function requestAttributesFromBackend(disclosureJWT) {
    console.log('got disclosure result JWT:', disclosureJWT);
    showProgress('Requesting BIG credentials...');
    $.ajax(BIGSERVER + 'request-attrs', {
        type: 'POST',
        data: disclosureJWT,
        processData: false, // unnecessary as we're sending a string
        contentType: 'text/plain',
    })
        .done(function(jwt) {
            credentialsJWT = jwt;
            console.log('issuing JWT', jwt);

            // Very crude JWT parser
            var credentials = JSON.parse(atob(jwt.split('.')[1]));

            // Show the new screen with the list of attributes and a button
            // to issue them.
            $('#window-before-request').hide();
            $('#window-after-request').show();
            $('#attributes .number').text(credentials.iprequest.request.credentials[0].attributes.bignumber);
            $('#attributes .startdate').text(credentials.iprequest.request.credentials[0].attributes.startdate);
            $('#attributes .profession').text(credentials.iprequest.request.credentials[0].attributes.profession);
            $('#attributes .specialism').text(credentials.iprequest.request.credentials[0].attributes.specialism);
            showProgress('Waiting for OK button...'); // invisible to user
        })
        .fail(function(jqXhr, textStatus) {
            var errormsg = jqXhr.responseText;
            console.error('failed to request credentials:', textStatus, errormsg);

            var message;
            if (errormsg.substr(0, 6) === 'error:') {
                if (errormsg in MESSAGES) {
                    message = MESSAGES[errormsg];
                } else {
                    // Fallback - message needs to be added to MESSAGES.
                    message = errormsg;
                }
            } else {
                // Most messages are prefixed with 'error:'. But some may not
                // be, for example, when there's a more severe configuration
                // problem in the server and the error is not generated by
                // the REST API. These are no 'user errors' or errors that occur
                // due to some issue on the client side - these are really our
                // fault.
                // The actual error can be seen in the developer console.
                message = 'Unknown problem';
            }

            if (errormsg === 'error:no-results') {
                requestEnd('danger', 'No registration was found in the BIG-register', message);
            } else {
                requestEnd('danger', 'Credentials cannot be requested from the backend server', message);
            }
        });
}

function showProgress(message) {
    console.log('progress:', message);
    $('#progress').text(message);
}


function requestEnd(result, message, errormsg) {
    console.log('user message: ' + result + ': ' + message);
    $('#btn-request').prop('disabled', false);
    $('#progress').text('');

    if (result !== 'cancel') {
        $('#result-alert')
            .removeClass('alert-success') // remove all 4 alert types
            .removeClass('alert-info')
            .removeClass('alert-warning')
            .removeClass('alert-danger')
            .addClass('alert-' + result)
            .text(message)
            .removeClass('hidden')
            .append('<br>')
            .append($('<small></small>').text(errormsg))
    }
}

function issueAttributes() {
    showProgress('Issuing credential...');
    IRMA.issue(credentialsJWT,
        function() { // success
            console.log('issue success!');
            requestEnd('success', 'Credential for the BIG-register released')

            // Go back to the start screen - we're done.
            $('#window-before-request').show();
            $('#window-after-request').hide();
        },
        function(msg) { // cancel
            console.warn('cancelled while issuing:', msg);
            requestEnd('cancel');
            // The user can try again now, or press 'cancel' on the issue screen.
        },
        function(errormsg) { // error
            console.error('error while issuing:', errormsg)
            requestEnd('danger', 'BIG-credential cannot be released', errormsg);

            // Go back to the start screen to show the error.
            $('#window-before-request').show();
            $('#window-after-request').hide();
        }
    );
}

function cancelAttributes() {
    requestEnd('cancel');
    $('#window-before-request').show();
    $('#window-after-request').hide();
}

init();
