'use strict';

var BIGSERVER = '/bigregister/api/';

function init() {
    $('#btn-request')
        .on('click', requestAttributes)
        .prop('disabled', false);
}

function requestAttributes() {
    // Indicate progress
    $('#result-alert').addClass('hidden');
    $('#btn-request').prop('disabled', true);
    showProgress('Requesting disclosure request...');

    $.ajax({
        url: BIGSERVER + 'request-search-attrs',
    }).done(function(jwt) {
        showProgress('Requesting iDIN attributes...');
        IRMA.verify(jwt,
        requestAttributesFromBackend, // success
        function(message) { // cancel
            requestEnd('cancel');
            // The user explicitly cancelled the request, so do nothing.
            console.warn('user cancelled disclosure');
        }, function(errormsg) { // error
            console.error('could not request iDIN attributes:', errormsg);
            requestEnd('danger', 'Kan de iDIN gegevens niet ophalen', errormsg);
        });
    }).fail(function(data) {
        requestEnd('danger', 'Kan geen verbinding maken met de backend server');
    });
}

function requestAttributesFromBackend(disclosureJWT) {
    console.log('got disclosure result JWT:', disclosureJWT);
    showProgress('Requesting BIG credentials...');
    $.ajax(BIGSERVER + 'request-attrs', {
        type: 'POST',
        data: disclosureJWT,
        processData: false, // unnecessary as we're sending a string
        contentType: 'text/plain',
    })
        .done(function(credentialsJWT) {
            console.log('issuing JWT', credentialsJWT);
            // Work around a bug in irma_js (?)
            showProgress('Waiting for popup to close...');
            setTimeout(function () {
                showProgress('Issuing credential...');
                IRMA.issue(credentialsJWT,
                    function() { // success
                        console.log('issue success!');
                        requestEnd('success', 'Credential voor het BIG register vrijgegeven')
                    },
                    function(msg) { // cancel
                        console.warn('cancelled while issuing:', msg);
                        requestEnd('cancel');
                    },
                    function(errormsg) { // error
                        console.error('error while issuing:', errormsg)
                        requestEnd('danger', 'Kan het BIG credential niet vrijgeven', errormsg);
                    }
                );
            }, 500);
        })
        .fail(function(jqXhr, textStatus) {
            // TODO: responseText may also be a server error message, not generated by the REST API.
            console.error('failed to request credentials:', textStatus, jqXhr.responseText);
            requestEnd('danger', 'Kan de credentials niet aan de backend server vragen', jqXhr.responseText);
        });
}

function showProgress(message) {
    console.log('progress:', message);
    $('#progress').text(message);
}


function requestEnd(result, message, errormsg) {
    console.log('user message: ' + result + ': ' + message);
    $('#btn-request').prop('disabled', false);
    $('#progress').text('');

    if (result !== 'cancel') {
        $('#result-alert')
            .removeClass('alert-success') // remove all 4 alert types
            .removeClass('alert-info')
            .removeClass('alert-warning')
            .removeClass('alert-danger')
            .addClass('alert-' + result)
            .text(message)
            .removeClass('hidden')
            .append('<br>')
            .append($('<small></small>').text(errormsg))
    }
}

init();
